package telas;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;

import javax.swing.ButtonGroup;
import javax.swing.JFileChooser;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.filechooser.FileFilter;

import org.w3c.dom.svg.SVGDocument;
import org.xml.sax.SAXException;



import controle.ConfigProperties;
import controle.Perfil;
import erro.Erro;

public class MainWindow extends javax.swing.JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 5730297269270659408L;
	
	
	/** Creates new form JFrame */
	public MainWindow() {
		super("CGPerfisDeVegetação - TESTER");
		
		super.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
            	erro.Erro.getInstance().finalize();
                System.exit(0);
            }
        });
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		
		
		intTextField = new javax.swing.JTextField();
		outTextField = new javax.swing.JTextField();
		inButton = new javax.swing.JButton();
		outButton = new javax.swing.JButton();
		inLabel = new javax.swing.JLabel();
		outLabel = new javax.swing.JLabel();
		showResultCheckBox = new javax.swing.JCheckBox();
		doButton = new javax.swing.JButton();
		colorRadioButton = new javax.swing.JRadioButton("Com cor",true);
		noColorRadioButton = new javax.swing.JRadioButton("Sem cor",false);
		greyColorRadioButton = new javax.swing.JRadioButton("Cinza",false);
		colorButtonGroup = new javax.swing.ButtonGroup();
		colorButtonGroup.add(colorRadioButton);
		colorButtonGroup.add(noColorRadioButton);
		colorButtonGroup.add(greyColorRadioButton);
		
		jMenuBar1 = new javax.swing.JMenuBar();
		fileMenu = new javax.swing.JMenu();
		helpMenu = new javax.swing.JMenu();
		openSVGSubMenu = new javax.swing.JMenuItem();
		toolsMenu = new  javax.swing.JMenu();
		configSubMenu = new javax.swing.JMenuItem();
		aboutSubMenu = new javax.swing.JMenuItem();
		helpContentsSubMenu = new javax.swing.JMenuItem();
		exitSubMenu = new javax.swing.JMenuItem();

		//setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		
		
		
		showResult = false;

		intTextField.setText("");

		outTextField.setText("");

		inButton.setText("...");

		outButton.setText("...");

		inLabel.setText("Entrada");

		outLabel.setText("Saida");

		showResultCheckBox.setText("Visualizar Resultado");

		doButton.setText("Gerar Resposta");

		fileMenu.setText("Arquivo");

		
		colorRadioButton.addItemListener( new Opcao( 1) );
		noColorRadioButton.addItemListener(new Opcao(2));
		greyColorRadioButton.addItemListener(new Opcao(3));
		
		
		openSVGSubMenu.setText("Abrir um SVG");
		exitSubMenu.setText("Sair");
		

		fileMenu.add(openSVGSubMenu);
		fileMenu.add(exitSubMenu);
		jMenuBar1.add(fileMenu);
		
		toolsMenu.setText("Ferramentas");
		configSubMenu.setText("Configuração");
		toolsMenu.add(configSubMenu);
		jMenuBar1.add(toolsMenu);
		
		helpMenu.setText("Ajuda");
		helpContentsSubMenu.setText("Conteudo da Ajuda");
		aboutSubMenu.setText("Sobre");

		helpMenu.add(helpContentsSubMenu);
		helpMenu.add(aboutSubMenu);
		jMenuBar1.add(helpMenu);

		
		setJMenuBar(jMenuBar1);

		// criando o layout este foi criado pelo plugin do netbeans e o codigo
		// exportado pro eclipse
		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout
				.setHorizontalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addGap(60, 60, 60)
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addComponent(
																				showResultCheckBox)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																		.addComponent(
																				doButton))
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addGroup(
																				layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.TRAILING)
																						.addComponent(
																								inLabel)
																						.addComponent(
																								outLabel))
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																		.addGroup(
																				layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING,
																								false)
																						.addGroup(
																								layout
																										.createSequentialGroup()
																										.addComponent(
																												outTextField,
																												javax.swing.GroupLayout.PREFERRED_SIZE,
																												133,
																												javax.swing.GroupLayout.PREFERRED_SIZE)
																										.addPreferredGap(
																												javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																										.addComponent(
																												outButton,
																												0,
																												0,
																												Short.MAX_VALUE))
																						.addGroup(
																								layout
																										.createSequentialGroup()
																										.addComponent(
																												intTextField,
																												javax.swing.GroupLayout.PREFERRED_SIZE,
																												133,
																												javax.swing.GroupLayout.PREFERRED_SIZE)
																										.addPreferredGap(
																												javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																										.addComponent(
																												inButton,
																												javax.swing.GroupLayout.PREFERRED_SIZE,
																												46,
																												javax.swing.GroupLayout.PREFERRED_SIZE)))))
										.addContainerGap(50, Short.MAX_VALUE)));
		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addGap(30, 30, 30)
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																intTextField,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(inButton)
														.addComponent(inLabel))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.TRAILING)
														.addGroup(
																layout
																		.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.BASELINE)
																		.addComponent(
																				outTextField,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addComponent(
																				outLabel))
														.addComponent(outButton))
										.addGap(9, 9, 9)
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																showResultCheckBox)
														.addComponent(doButton))
										.addContainerGap(50, Short.MAX_VALUE)));

		pack();

		// ações dos botoes
		inButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent actEvent) {
				JFileChooser fc = new JFileChooser(".");
				int choice = fc.showOpenDialog(getContentPane());
				if (choice == JFileChooser.APPROVE_OPTION) {
					inFile = fc.getSelectedFile();
					intTextField.setText(inFile.getAbsolutePath());
				}
			}
		});

		outButton.addActionListener(new ActionListener() {

			// TODO criar as opcoes de extensao para salvar o arquivo
			public void actionPerformed(ActionEvent actEvent) {
				JFileChooser fc = new JFileChooser(".");
				
				 
				
				/*Criando filtros para salvar com extensoes apenas do tipo pdf,png,jpeg,svg*/
			/*	fc.addChoosableFileFilter(new FileFilter(){
					  public boolean accept(File f) {  
					                            if (f.isDirectory()) {  
					                                 return true;  
					                             }  
					                              
					                           return (f.getName().endsWith(".pdf") ||f.getName().endsWith(".PDF") );  
					                          
					                               
					                     }  
					   
					                     public String getDescription() {  
					                         return "Pdf Files";  
					             }});  
				
				
				fc.addChoosableFileFilter(new FileFilter(){
					  public boolean accept(File f) {  
					                            if (f.isDirectory()) {  
					                                 return true;  
					                             }  
					                              
					                           return (f.getName().endsWith(".png") ||f.getName().endsWith(".PNG") );  
					                          
					                               
					                     }  
					   
					                     public String getDescription() {  
					                         return "Png Files";  
					             }});  
				
				fc.addChoosableFileFilter(new FileFilter(){
					  public boolean accept(File f) {  
					                            if (f.isDirectory()) {  
					                                 return true;  
					                             }  
					                              
					                           return (f.getName().endsWith(".jpeg") ||f.getName().endsWith(".JPEG") );  
					                          
					                               
					                     }  
					   
					                     public String getDescription() {  
					                         return "Jpeg Files";  
					             }});*/  
				fc.addChoosableFileFilter(new FileFilter(){
					  public boolean accept(File f) {  
					                            if (f.isDirectory()) {  
					                                 return true;  
					                             }  
					                              
					                           return (f.getName().endsWith(".svg") ||f.getName().endsWith(".SVG") );  
					                          
					                               
					                     }  
					   
					                     public String getDescription() {  
					                         return "Svg Files";  
					             }});  
				
				fc.setAcceptAllFileFilterUsed(false);
				int choice = fc.showSaveDialog(getContentPane());
				
				
				if (choice == JFileChooser.APPROVE_OPTION) {
					outFile = fc.getSelectedFile();
					outTextField.setText(outFile.getAbsolutePath());
				}
			}
		});

		doButton.addActionListener(new ActionListener() {

			@SuppressWarnings("static-access")
			public void actionPerformed(ActionEvent actEvent) {
				// caso nao tenha sido escolhido os arquivos de entrada e saida
				if (inFile == null || outFile == null) {
					String alerta = " ";
					if (inFile == null)
						alerta = "entrada";
					else
						alerta = "saida";
					JOptionPane.showMessageDialog(getContentPane(),
							"Escolha um arquivo de " + alerta, "Aviso",
							JOptionPane.INFORMATION_MESSAGE);

				} else {

					// em caso de ja conter um arquivo de saida com tal nome
					int confirmSubs = 0;
					if (outFile.exists())
						confirmSubs = (JOptionPane
								.showConfirmDialog(
										getContentPane(),
										"Arquivo de saida ja existe\nDeseja sobescreve-lo?\n\nObs Opção Nao nomeia automaticamente")); // showMessageDialog(getParent(),

					// se a escolha nao foi cancel
					if (confirmSubs != JOptionPane.CANCEL_OPTION) {
						// se a opcao foi nomeacao automatica deve-se criar um
						// nome
						if (confirmSubs == JOptionPane.NO_OPTION) {
							int indName = 1;
							// criar um nome semelhante como o nome passado
							// porem com indices

							String destSubs = outFile.getAbsolutePath();
							String extSubs = destSubs.substring(destSubs
									.lastIndexOf("."), destSubs.length());
							String pathSubs = destSubs.substring(0, destSubs
									.lastIndexOf("."));

							if (pathSubs.lastIndexOf("(") > outFile
									.getAbsolutePath().lastIndexOf(
											outFile.pathSeparator)) {
								while (!pathSubs.endsWith("(")
										&& pathSubs.length() > 0)
									pathSubs = pathSubs.substring(0, pathSubs
											.length() - 1);

								// TODO excessao para o decrescimo de letrinhas
								// no pathSubs
								if (pathSubs.length() == 0)
									;

								destSubs = pathSubs + indName + ")" + extSubs;
							} else
								// ainda nao tem nenhum arquivo com o mesmo nome
								// e com parenteses
								destSubs = outFile.getAbsolutePath().substring(
										0,
										outFile.getAbsolutePath().lastIndexOf(
												"."))
										+ "("
										+ indName
										+ ")"
										+ outFile.getAbsolutePath().substring(
												outFile.getAbsolutePath()
														.lastIndexOf("."),
												outFile.getAbsolutePath()
														.length());

							
							
							File auxOutFile = new File(destSubs);
							indName++;

							while (auxOutFile.exists()
									&& indName <= outFile.getParentFile()
											.listFiles().length) {
								destSubs = auxOutFile.getAbsolutePath();
								extSubs = destSubs.substring(destSubs
										.lastIndexOf("."), destSubs.length());
								pathSubs = destSubs.substring(0, destSubs
										.lastIndexOf("."));

								while (!pathSubs.endsWith("(")
										&& pathSubs.length() > 0)
									pathSubs = pathSubs.substring(0, pathSubs
											.length() - 1);

								// TODO excessao para o decrescimo de letrinhas
								// no pathSubs
								if (pathSubs.length() == 0)
									;

								destSubs = pathSubs + indName + ")" + extSubs;

								auxOutFile = new File(destSubs);
								indName++;

							}

							outFile = auxOutFile;

						}

						
						try {
							
							
							ConfigProperties configuration;
							
							if(configWindow != null){
								configuration = configWindow.configuration;
								System.out.println("Novas configuracoes");
							}else{
								configuration = new ConfigProperties();
							}
							
							respPerfil = new Perfil(inFile, outFile,configuration);
							respPerfil.generatedResult();
							resp = respPerfil.respSVGDocument;
							controle.RasterSVG.rasterizing(resp, outFile);
							
							
							if (showResult) {// se o checkbox estiver ativado
								// aparecera uma tela contendo o
								// resultado
								String args[] = { "" };
								args[0] = resp.getDocumentURI();
								ViewerWindow.main(args,resp);
							}
							JOptionPane.showMessageDialog(getContentPane(),
									"Processo concluido" ,
									"", JOptionPane.INFORMATION_MESSAGE);
							
							
							resp = null;
							respPerfil = null;
							System.out.println();
						} catch (FileNotFoundException e) {
							JOptionPane.showMessageDialog(getContentPane(),
									"Arquivo de entrada invalido" ,
									"Erro", JOptionPane.ERROR_MESSAGE);
							
						}catch (NumberFormatException e) {
							JOptionPane.showMessageDialog(getContentPane(),
									"Arquivo de entrada invalido" +"\n"+e.getMessage(),
									"Erro", JOptionPane.ERROR_MESSAGE);
							
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (SAXException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						

					}
				}
			}

		});

		showResultCheckBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent actEvent) {
				showResult = !showResult;
			}
		});

		openSVGSubMenu.addActionListener(new ActionListener() {

			public void actionPerformed(ActionEvent actEvent) {

				System.out.println("Tela pra visualizar");
				JFileChooser fc = new JFileChooser(".");
				int choice = fc.showOpenDialog(getContentPane());

				if (choice == JFileChooser.APPROVE_OPTION) {
					final File f = fc.getSelectedFile();

					String args[] = { "" };

					args[0] = f.toURI().toString();
					ViewerWindow.main(args,null);

				}

			}

		});

		exitSubMenu.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				System.exit(0);

			}
		});

		aboutSubMenu.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				JOptionPane
						.showMessageDialog(
								getContentPane(),
								"Universidade Federal de Viçosa - DPI \n"
										+ "Rodolfo Costa Ladeira\nemail:rodolfo53821@hotmail.com",
								"Sobre o CGPerfisDeVegetação", -1);
			}

		});
		helpContentsSubMenu.addActionListener(new ActionListener() {

			public void actionPerformed(ActionEvent arg0) {
				Erro erroOcurred = Erro.getInstance();
				
				erroOcurred.createError(3, "helpButton", "573");
				
				//erroOcurred.finalize();
			}

		});
		configSubMenu.addActionListener(new ActionListener() {

			public void actionPerformed(ActionEvent arg0) {
				configWindow = new ConfigWindow();
				configWindow.setVisible(true);
				
			
			}

		});


	}// </editor-fold>
	
	
	
	private class Opcao implements ItemListener{
	       private int opcao;
	       
	       public Opcao(int i){
	    	   opcao = i;
	       }
			public void itemStateChanged(ItemEvent arg0) {
				colorOp = opcao;
				
			}
			
		}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		try{
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MainWindow().setVisible(true);
			}
		});
		}catch(Error e){
			Erro.getInstance().createError(1, "mainWindow", "63");
		}
	}

	// Variables declaration

	protected File outFile = null;
	private File inFile = null;
	private boolean showResult;
	private JMenuItem openSVGSubMenu;
	private JMenuItem exitSubMenu;
	private JMenuItem helpContentsSubMenu;
	private JMenuItem aboutSubMenu;
	private javax.swing.JButton inButton;
	private javax.swing.JButton outButton;
	private javax.swing.JButton doButton;
	private javax.swing.JCheckBox showResultCheckBox;
	private javax.swing.JLabel inLabel;
	private javax.swing.JLabel outLabel;
	private javax.swing.JMenu fileMenu;
	private javax.swing.JMenu helpMenu;
	private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JTextField intTextField;
	private javax.swing.JTextField outTextField;
	private JRadioButton colorRadioButton ;
	private JRadioButton noColorRadioButton;
	private JRadioButton greyColorRadioButton;
	private ButtonGroup colorButtonGroup;
	private int colorOp = 1;
	private JMenuItem configSubMenu;
	private JMenu toolsMenu;
	private ConfigWindow configWindow;
	private Perfil respPerfil;
	private SVGDocument resp;

	// End of variables declaration

}
